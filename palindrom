/*Используя стек определить, является ли заданная последовательность символов палиндромом,
при этом выводится исходная последовательность как в прямом, так и в обратном порядке.*/
#include <iostream>
using namespace std;
struct Node;
typedef Node* ptrNode;
struct Node {
	ptrNode next;
	int dat;
};
typedef ptrNode LIFO;
void initStack(LIFO& stack)
{
	stack = nullptr;
}

bool isEmptyStack(LIFO stack)
{
	return stack == nullptr;
};

void pushStack(LIFO& stack, char last)
{
	ptrNode q = new Node;
	q->dat = last;
	q->next = stack;
	stack = q;
};
void popStack(LIFO& stack, char& last)
{
	ptrNode q = stack;
	last = q->dat;
	stack = stack->next;
	delete q;
};
int main()
 {
	setlocale(LC_ALL,"Russian");
	LIFO  stackSeq, stackBufSeq, stackFirPart;
	int i, n;
	char x, y;
	bool flag = true;
	initStack(stackSeq);
	initStack(stackBufSeq);
	initStack(stackFirPart);
	cout << "Кол-во символов = ";
	cin >> n;
	cin.ignore(300, '\n');
	cout << "Символы = " << endl;
	for (int i = 0; i < n; i++)
	{
		cin.get(x);
		if (n / 2 > i)
			pushStack(stackFirPart, x);
		else
			if (!((n % 2 == 1) && (i == (n / 2))))
			{
				popStack(stackFirPart, y);
				if (x != y)
					flag = false;
			}
		pushStack(stackSeq, x);
	};
	cin.ignore(300, '\n');
	cout << endl << "Последовательность в обратном порядке" << endl;
	while (!isEmptyStack(stackSeq))
	{
		popStack(stackSeq, x);
		cout << x;
		pushStack(stackBufSeq, x);
	}
	cout << endl << "Последовательность в прямом порядке" << endl;
	while (!isEmptyStack(stackBufSeq))
	{
		popStack(stackBufSeq, x);
		cout << x;
	}
	if (flag)
		cout << endl << "Палиндромом" << endl;
	else
		cout << endl << "Не палиндромом" << endl;

	cout << endl;
	system("pause");
	return 0;
}
